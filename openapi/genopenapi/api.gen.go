// Package genopenapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package genopenapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Event defines model for Event.
type Event struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *int       `json:"id,omitempty"`
	LocationId  *int       `json:"locationId,omitempty"`
	Title       *string    `json:"title,omitempty"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
	When        *time.Time `json:"when,omitempty"`
}

// Guest defines model for Guest.
type Guest struct {
	Alias     *string    `json:"alias,omitempty"`
	Attending *bool      `json:"attending,omitempty"`
	ContactId *int       `json:"contactId,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	PartyId   *int       `json:"partyId,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all wedding events
	// (GET /events)
	ListEvents(ctx echo.Context) error
	// Get all guests
	// (GET /guests)
	ListGuests(ctx echo.Context) error
	// Get a specific guest
	// (GET /guests/{guestId})
	GetGuest(ctx echo.Context, guestId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListEvents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListEvents(ctx)
	return err
}

// ListGuests converts echo context to params.
func (w *ServerInterfaceWrapper) ListGuests(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListGuests(ctx)
	return err
}

// GetGuest converts echo context to params.
func (w *ServerInterfaceWrapper) GetGuest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "guestId" -------------
	var guestId int

	err = runtime.BindStyledParameterWithOptions("simple", "guestId", ctx.Param("guestId"), &guestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter guestId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGuest(ctx, guestId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/events", wrapper.ListEvents)
	router.GET(baseURL+"/guests", wrapper.ListGuests)
	router.GET(baseURL+"/guests/:guestId", wrapper.GetGuest)

}

type ListEventsRequestObject struct {
}

type ListEventsResponseObject interface {
	VisitListEventsResponse(w http.ResponseWriter) error
}

type ListEvents200JSONResponse []Event

func (response ListEvents200JSONResponse) VisitListEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGuestsRequestObject struct {
}

type ListGuestsResponseObject interface {
	VisitListGuestsResponse(w http.ResponseWriter) error
}

type ListGuests200JSONResponse []Guest

func (response ListGuests200JSONResponse) VisitListGuestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGuestRequestObject struct {
	GuestId int `json:"guestId"`
}

type GetGuestResponseObject interface {
	VisitGetGuestResponse(w http.ResponseWriter) error
}

type GetGuest200JSONResponse Guest

func (response GetGuest200JSONResponse) VisitGetGuestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all wedding events
	// (GET /events)
	ListEvents(ctx context.Context, request ListEventsRequestObject) (ListEventsResponseObject, error)
	// Get all guests
	// (GET /guests)
	ListGuests(ctx context.Context, request ListGuestsRequestObject) (ListGuestsResponseObject, error)
	// Get a specific guest
	// (GET /guests/{guestId})
	GetGuest(ctx context.Context, request GetGuestRequestObject) (GetGuestResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListEvents operation middleware
func (sh *strictHandler) ListEvents(ctx echo.Context) error {
	var request ListEventsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListEvents(ctx.Request().Context(), request.(ListEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListEventsResponseObject); ok {
		return validResponse.VisitListEventsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListGuests operation middleware
func (sh *strictHandler) ListGuests(ctx echo.Context) error {
	var request ListGuestsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListGuests(ctx.Request().Context(), request.(ListGuestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGuests")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListGuestsResponseObject); ok {
		return validResponse.VisitListGuestsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetGuest operation middleware
func (sh *strictHandler) GetGuest(ctx echo.Context, guestId int) error {
	var request GetGuestRequestObject

	request.GuestId = guestId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGuest(ctx.Request().Context(), request.(GetGuestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGuest")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetGuestResponseObject); ok {
		return validResponse.VisitGetGuestResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7yVzW7bMAzHX0XgdvRib70UvvVQBAF26G2HoQfWYhwVsqRJTIog8LsPlJz0I87QbsBO",
	"UUiRIn/kHz5A54fgHTlO0B4gdRsaMB9vd+RYDiH6QJENZXMXCZn0TXatfRyQoQWNTF/YDAQV8D4QtJA4",
	"GtfDWIGm1EUT2HgnQWd+o1+YjWPqKYrd+g4laHXBz4YtzWbcBv3RIp825N57ezxZ/MMjdSzxyy2lGVxo",
	"TcF59iAyk9Py59n74L0ldOLuvGPs+FLvfzGGS5gdDvMUA0beXyrgw4jPoYnJuLWXDK92BG7uVmrtoxrQ",
	"YW9cr55ICyrVC+VUKZLlTJWyXou/Uui04og7sgs4bQb8mMJu7lZQwY5iKvm/LppFI134QA6DgRauFs3i",
	"CqRp3uSB1eUNOfaUu5S5nhYSvpvEt+VKBZFS8C6VmX9rmqwU73iSEIZgTVnm+jEVGRSpyckwDTnwc6Q1",
	"tPCpfhZlPSmyLnJ8hogx4r4wfM1O6lJ+PSHK3NN2GDDuoYUlsUJrTzzp2ABjn6D9CZPhXsLqQvuPBJbl",
	"yv8gUBT2AQJT+fME+mPhx84nw8vO60P+XenxIoMlFQR5cyIOxBQl3QGMlCLbBEeJwZQt0/q1NZE0tBy3",
	"VL1A8VZp4/0/sn0H0nOE2aE0MRo7S1ClQJ1Zm66AnOUoURR3RyBvhuQ7tErTjqwPAzlW5S5UsI0WWtgw",
	"h7au5SNgNz5xe91cNzDej78DAAD//+YbUFm0BgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
